// Mocks generated by Mockito 5.4.6 from annotations
// in bac_project/test/features/tests/domain/usecases/get_my_results_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bac_project/core/resources/errors/failures.dart' as _i5;
import 'package:bac_project/features/tests/data/responses/add_result_response.dart'
    as _i6;
import 'package:bac_project/features/tests/data/responses/get_results_response.dart'
    as _i8;
import 'package:bac_project/features/tests/domain/repositories/results_repository.dart'
    as _i3;
import 'package:bac_project/features/tests/domain/requests/add_result_request.dart'
    as _i7;
import 'package:bac_project/features/tests/domain/requests/get_my_results_request.dart'
    as _i9;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ResultsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockResultsRepository extends _i1.Mock implements _i3.ResultsRepository {
  MockResultsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AddResultResponse>> addResult(
    _i7.AddResultRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addResult, [request]),
            returnValue: _i4.Future<
              _i2.Either<_i5.Failure, _i6.AddResultResponse>
            >.value(
              _FakeEither_0<_i5.Failure, _i6.AddResultResponse>(
                this,
                Invocation.method(#addResult, [request]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.AddResultResponse>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.GetResultsResponse>> getMyResults(
    _i9.GetMyResultsRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getMyResults, [request]),
            returnValue: _i4.Future<
              _i2.Either<_i5.Failure, _i8.GetResultsResponse>
            >.value(
              _FakeEither_0<_i5.Failure, _i8.GetResultsResponse>(
                this,
                Invocation.method(#getMyResults, [request]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i8.GetResultsResponse>>);
}
