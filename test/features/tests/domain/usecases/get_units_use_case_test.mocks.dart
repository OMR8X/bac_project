// Mocks generated by Mockito 5.4.6 from annotations
// in bac_project/test/features/tests/domain/usecases/get_units_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bac_project/core/resources/errors/failures.dart' as _i5;
import 'package:bac_project/features/tests/domain/repositories/tests_repository.dart'
    as _i3;
import 'package:bac_project/features/tests/domain/requests/get_lessons_request.dart'
    as _i9;
import 'package:bac_project/features/tests/domain/requests/get_questions_request.dart'
    as _i13;
import 'package:bac_project/features/tests/domain/requests/get_test_options_request.dart'
    as _i11;
import 'package:bac_project/features/tests/domain/requests/get_units_request.dart'
    as _i7;
import 'package:bac_project/features/tests/data/responses/get_lessons_response.dart'
    as _i8;
import 'package:bac_project/features/tests/data/responses/get_questions_response.dart'
    as _i12;
import 'package:bac_project/features/tests/data/responses/get_test_options_response.dart'
    as _i10;
import 'package:bac_project/features/tests/data/responses/get_units_response.dart'
    as _i6;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TestsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestsRepository extends _i1.Mock implements _i3.TestsRepository {
  MockTestsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.GetUnitsResponse>> getUnits(
    _i7.GetUnitsRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUnits, [request]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.GetUnitsResponse>>.value(
                  _FakeEither_0<_i5.Failure, _i6.GetUnitsResponse>(
                    this,
                    Invocation.method(#getUnits, [request]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.GetUnitsResponse>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.GetLessonsResponse>> getLessons(
    _i9.GetLessonsRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getLessons, [request]),
            returnValue: _i4.Future<
              _i2.Either<_i5.Failure, _i8.GetLessonsResponse>
            >.value(
              _FakeEither_0<_i5.Failure, _i8.GetLessonsResponse>(
                this,
                Invocation.method(#getLessons, [request]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i8.GetLessonsResponse>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.GetTestOptionsResponse>>
  getTestOptions(_i11.GetTestOptionsRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#getTestOptions, [request]),
            returnValue: _i4.Future<
              _i2.Either<_i5.Failure, _i10.GetTestOptionsResponse>
            >.value(
              _FakeEither_0<_i5.Failure, _i10.GetTestOptionsResponse>(
                this,
                Invocation.method(#getTestOptions, [request]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i10.GetTestOptionsResponse>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i12.GetQuestionsResponse>> getQuestions(
    _i13.GetQuestionsRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getQuestions, [request]),
            returnValue: _i4.Future<
              _i2.Either<_i5.Failure, _i12.GetQuestionsResponse>
            >.value(
              _FakeEither_0<_i5.Failure, _i12.GetQuestionsResponse>(
                this,
                Invocation.method(#getQuestions, [request]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i12.GetQuestionsResponse>>);
}
