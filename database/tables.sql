-- Table: sections
CREATE TABLE public.sections (
    id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    title TEXT NOT NULL,
	created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Table: governorates
CREATE TABLE public.governorates (
    id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    title TEXT NOT NULL,
	created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Table: question_categories
CREATE TABLE public.question_categories (
    id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    title TEXT NOT NULL UNIQUE,
    sort_order INTEGER DEFAULT 0,
	
	is_orderable BOOLEAN NOT NULL DEFAULT FALSE,
	is_typeable BOOLEAN NOT NULL DEFAULT FALSE,
	is_mcq BOOLEAN NOT NULL DEFAULT FALSE,
	is_single_answer BOOLEAN NOT NULL DEFAULT FALSE,
	
	created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);


-- Table: units
CREATE TABLE public.units (
    id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    title TEXT NOT NULL,
    subtitle TEXT NOT NULL,
    icon_url TEXT,
    sort_order INTEGER DEFAULT 0, 
	created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT unique_unit_title UNIQUE (title)
);

-- Table: lessons
CREATE TABLE public.lessons (
    id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    title TEXT NOT NULL,
    unit_id INTEGER NOT NULL,
    icon_url TEXT,
    sort_order INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (unit_id) REFERENCES public.units(id) ON DELETE CASCADE,
    UNIQUE (unit_id, title)
);

-- Table: questions
CREATE TABLE public.questions (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    content TEXT NOT NULL,
    image_url TEXT DEFAULT NULL,
    lesson_id INTEGER NOT NULL,
    category_id INTEGER NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (lesson_id) REFERENCES public.lessons(id) ON DELETE CASCADE,
    FOREIGN KEY (category_id) REFERENCES public.question_categories(id) ON DELETE CASCADE
);


-- Table: question_options
CREATE TABLE public.question_options (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    content TEXT NOT NULL,
    is_correct BOOLEAN DEFAULT false,
    sort_order INTEGER NULL,
    question_id INTEGER NOT NULL,
    image_url TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE
);


-- Table: results
CREATE TABLE public.results (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    user_id UUID NOT NULL,
    lesson_id INTEGER NULL,
    total_questions INTEGER NOT NULL,
    correct_answers INTEGER NOT NULL,
    wrong_answers INTEGER NOT NULL,
    score NUMERIC(5,2) NOT NULL,
    duration_seconds INTEGER NOT NULL,
    is_test_mode BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (lesson_id) REFERENCES public.lessons(id) ON DELETE CASCADE
);

-- Table: question_answers
CREATE TABLE public.question_answers (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    result_id BIGINT NOT NULL,
    question_id INTEGER NOT NULL,
    option_id INTEGER NULL,          
    answer_text TEXT NULL,           
    answer_position INTEGER NULL,
	is_correct BOOL not null default false,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (result_id) REFERENCES public.results(id) ON DELETE CASCADE,
    FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE RESTRICT,
    FOREIGN KEY (option_id) REFERENCES public.question_options(id) ON DELETE SET NULL
);

-- Table: answer_evaluations
CREATE TABLE public.answer_evaluations (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    question_answer_id BIGINT NOT NULL,
    -- note: this could lead to conflicts.
    is_correct BOOLEAN NOT NULL,           -- this evaluation’s judgment
    confidence NUMERIC(5,2) NULL,          -- 0–100 scale or 0–1 depending on your choice
    notes TEXT NULL,                       -- explanation / reasoning
    model_name TEXT NULL,                  -- if AI, store which model was used
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (question_answer_id) REFERENCES public.question_answers(id) ON DELETE CASCADE
);
-- Table: notification_topics
CREATE TABLE notification_topics (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,  -- e.g., 'news', 'ads', 'updates'
    description TEXT                   -- optional description
);
-- Table: notification_types
CREATE TABLE notification_types (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,  -- 'info', 'action', 'marketing', 'weakness', etc.
    description TEXT
);
-- Table: notifications
CREATE TYPE notification_priority AS ENUM ('low', 'normal', 'high');
CREATE TABLE notifications (
    id BIGSERIAL PRIMARY KEY,
    type_id BIGINT NOT NULL,
	topic_id BIGINT NOT NULL,
    title TEXT NOT NULL,
    body TEXT NOT NULL,
    image_url TEXT,
    action_type VARCHAR(50),  -- 'open_url', 'open_quiz', 'none', etc.
    action_value TEXT,         -- actual URL, quiz ID, etc.
	payload JSONB,
    priority notification_priority DEFAULT 'normal',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP,
	FOREIGN KEY (type_id) REFERENCES public.notification_types(id) ON DELETE CASCADE,
    FOREIGN KEY (topic_id) REFERENCES public.notification_topics(id) ON DELETE CASCADE
);

-- Table: user_topic_subscriptions
CREATE TABLE user_topic_subscriptions (
    user_id UUID NOT NULL DEFAULT auth.uid(),
    topic_id BIGINT NOT NULL,
    PRIMARY KEY (user_id, topic_id),
	FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE,
    FOREIGN KEY (topic_id) REFERENCES public.notification_topics(id) ON DELETE CASCADE
);
-- Table: user_notifications
CREATE TABLE user_notifications (
    id BIGSERIAL PRIMARY KEY,
    user_id UUID NOT NULL DEFAULT auth.uid(),
    notification_id BIGINT NOT NULL,
    delivered_at TIMESTAMP,
    read_at TIMESTAMP,
    dismissed_at TIMESTAMP,         
	--  TODO: trace actions status
    action_performed BOOLEAN DEFAULT FALSE,
	FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE,
    FOREIGN KEY (notification_id) REFERENCES public.notifications(id) ON DELETE CASCADE
);

-- Table: device_tokens
CREATE TABLE public.user_device_tokens (
    id BIGSERIAL PRIMARY KEY,
    user_id UUID NOT NULL DEFAULT auth.uid(),
    device_brand TEXT NOT NULL,
    device_model TEXT NOT NULL,
    device_token TEXT NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE,
	CONSTRAINT uq_user_device_token UNIQUE (user_id, device_token) 
);




-- drop table question_answers;
-- drop table results;
-- drop table question_options;
-- drop table questions;
-- drop table lessons;
-- drop table units;
-- drop table sections;
-- drop table governorates;
-- drop table question_categories;

