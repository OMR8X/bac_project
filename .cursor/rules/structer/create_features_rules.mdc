---
alwaysApply: false
---
IMPORTANT: always send user plan and wait for his approval to start doing changes.


### Backend feature structure (no UI) modeled after `features/tests`

- **Top-level**
  - `lib/features/<feature_name>/`
    - Contains all non-UI code for a feature, split into `domain` and `data` layers.

## Folder structure

```text
lib/features/<feature_name>/
  data/
    datasources/
      <feature_name>_remote_data_source.dart
      <feature_name>_remote_data_source_impl.dart
    mappers/
      <entity>_mapper.dart
    models/
      <entity>_model.dart
      ...nested models if needed
    repositories/
      <feature_name>_repository_impl.dart
    responses/
      <operation>_response.dart
  domain/
    entities/
      <entity>.dart
    repositories/
      <feature_name>_repository.dart
    requests/
      <operation>_request.dart
    usecases/
      <operation>_use_case.dart
```

## What each folder represents

- **domain/**
  - Pure business layer. No SDKs, no JSON. Stable contracts.
  - `entities/`: Core business objects with fields, equality, `copyWith`. Example: `Question`, `Result`, `Unit`.
  - `repositories/`: Abstract interfaces that define capabilities (e.g., `TestsRepository`, `ResultsRepository`). Implemented in data layer.
  - `requests/`: Input DTOs for use cases. Provide `toJsonBody()` that matches backend parameter names (e.g., `p_*`, `snake_case`).
  - `usecases/`: One-action classes wrapping repository calls, returning `Either<Failure, Response>`.

- **data/**
  - External I/O, mapping, and concrete implementations.
  - `datasources/`:
    - `*_remote_data_source.dart`: Abstract port defining remote operations.
    - `*_remote_data_source_impl.dart`: Concrete network calls using `ApiManager`/`SupabaseEndpoints`/SDKs.
  - `models/`: JSON-capable representations often extending domain entities. Contain `fromJson`, `toJson`, `copyWith`, equality.
  - `mappers/`: Extensions to convert between models and entities in both directions (e.g., `ResultModelExtension`, `ResultEntityExtension`).
  - `responses/`: Wrappers that shape backend payloads into strongly-typed outputs consumed by the domain (e.g., `GetQuestionsResponse`, `AddResultResponse`).
  - `repositories/`: Concrete implementations of domain repositories. Call data sources, map models/entities, handle exceptions and return `Either<Failure, T>`.

## File naming and responsibilities

- **Entities**: `<entity>.dart`
  - Business objects only; no serialization. Keep immutable with `copyWith`, equality, `hashCode`.

- **Requests**: `<operation>_request.dart`
  - Capture inputs for a use case; expose `toJsonBody()` aligned to backend parameter names.

- **Use cases**: `<operation>_use_case.dart`
  - Single public `call()` that delegates to repository and returns `Either<Failure, <ResponseType>>`.

- **Repositories (domain)**: `<feature_name>_repository.dart`
  - Abstract interface listing operations.

- **Repositories (data)**: `<feature_name>_repository_impl.dart`
  - Implements domain repository. Try/catch around data source calls, map exceptions via `ExceptionsMapper`, return `Either`.

- **Data sources**:
  - Abstract: `*_remote_data_source.dart` declares methods.
  - Impl: `*_remote_data_source_impl.dart` performs `ApiManager().get/post` with `SupabaseEndpoints.rpc/edge`, returns response objects.

- **Models**: `<entity>_model.dart`
  - Extend corresponding entity when convenient; add `fromJson`, `toJson`, `copyWith`. Handle nested lists via other models.

- **Mappers**: `<entity>_mapper.dart`
  - Provide bidirectional extensions `Model.toEntity()` and `Entity.toModel()` to decouple layers.

- **Responses**: `<operation>_response.dart`
  - Shape the API payload to typed results, often aggregating lists or nested models.

## Data flow contract (no UI)

- Use case receives a `Request` → calls `Repository` (domain) → repository uses `DataSource` (data) → data source hits API and builds `Response`/`Model` → repository returns `Either<Failure, Response>` to use case.
### Backend feature structure (no UI) modeled after `features/tests`

- **Top-level**
  - `lib/features/<feature_name>/`
    - Contains all non-UI code for a feature, split into `domain` and `data` layers.

## Folder structure

```text
lib/features/<feature_name>/
  data/
    datasources/
      <feature_name>_remote_data_source.dart
      <feature_name>_remote_data_source_impl.dart
    mappers/
      <entity>_mapper.dart
    models/
      <entity>_model.dart
      ...nested models if needed
    repositories/
      <feature_name>_repository_impl.dart
    responses/
      <operation>_response.dart
  domain/
    entities/
      <entity>.dart
    repositories/
      <feature_name>_repository.dart
    requests/
      <operation>_request.dart
    usecases/
      <operation>_use_case.dart
```

## What each folder represents

- **domain/**
  - Pure business layer. No SDKs, no JSON. Stable contracts.
  - `entities/`: Core business objects with fields, equality, `copyWith`. Example: `Question`, `Result`, `Unit`.
  - `repositories/`: Abstract interfaces that define capabilities (e.g., `TestsRepository`, `ResultsRepository`). Implemented in data layer.
  - `requests/`: Input DTOs for use cases. Provide `toJsonBody()` that matches backend parameter names (e.g., `p_*`, `snake_case`).
  - `usecases/`: One-action classes wrapping repository calls, returning `Either<Failure, Response>`.

- **data/**
  - External I/O, mapping, and concrete implementations.
  - `datasources/`:
    - `*_remote_data_source.dart`: Abstract port defining remote operations.
    - `*_remote_data_source_impl.dart`: Concrete network calls using `ApiManager`/`SupabaseEndpoints`/SDKs.
  - `models/`: JSON-capable representations often extending domain entities. Contain `fromJson`, `toJson`, `copyWith`, equality.
  - `mappers/`: Extensions to convert between models and entities in both directions (e.g., `ResultModelExtension`, `ResultEntityExtension`).
  - `responses/`: Wrappers that shape backend payloads into strongly-typed outputs consumed by the domain (e.g., `GetQuestionsResponse`, `AddResultResponse`).
  - `repositories/`: Concrete implementations of domain repositories. Call data sources, map models/entities, handle exceptions and return `Either<Failure, T>`.

## File naming and responsibilities

- **Entities**: `<entity>.dart`
  - Business objects only; no serialization. Keep immutable with `copyWith`, equality, `hashCode`.

- **Requests**: `<operation>_request.dart`
  - Capture inputs for a use case; expose `toJsonBody()` aligned to backend parameter names.

- **Use cases**: `<operation>_use_case.dart`
  - Single public `call()` that delegates to repository and returns `Either<Failure, <ResponseType>>`.

- **Repositories (domain)**: `<feature_name>_repository.dart`
  - Abstract interface listing operations.

- **Repositories (data)**: `<feature_name>_repository_impl.dart`
  - Implements domain repository. Try/catch around data source calls, map exceptions via `ExceptionsMapper`, return `Either`.

- **Data sources**:
  - Abstract: `*_remote_data_source.dart` declares methods.
  - Impl: `*_remote_data_source_impl.dart` performs `ApiManager().get/post` with `SupabaseEndpoints.rpc/edge`, returns response objects.

- **Models**: `<entity>_model.dart`
  - Extend corresponding entity when convenient; add `fromJson`, `toJson`, `copyWith`. Handle nested lists via other models.

- **Mappers**: `<entity>_mapper.dart`
  - Provide bidirectional extensions `Model.toEntity()` and `Entity.toModel()` to decouple layers.

- **Responses**: `<operation>_response.dart`
  - Shape the API payload to typed results, often aggregating lists or nested models.

## Data flow contract (no UI)

- Use case receives a `Request` → calls `Repository` (domain) → repository uses `DataSource` (data) → data source hits API and builds `Response`/`Model` → repository returns `Either<Failure, Response>` to use case.
