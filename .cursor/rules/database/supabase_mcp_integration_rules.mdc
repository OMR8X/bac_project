---
description: if updating and .sql extension files or files under database/ directory
alwaysApply: false
---
# Supabase MCP Integration Rules

## Overview
This document provides comprehensive instructions for AI assistants working on this Flutter project with Supabase backend integration. It outlines the available MCP (Model Context Protocol) tools for Supabase and establishes rules for maintaining database consistency between local SQL files and the remote Supabase database. **Important**: This project does not have a local database environment - all SQL changes are applied directly to and tested against the remote Supabase database.

## ‚ö†Ô∏è CRITICAL REQUIREMENT: Implementation Planning

**BEFORE ANY DATABASE CHANGES, UPDATES, DELETES, OR OPERATIONS:**

üö® **ALWAYS PROVIDE A DETAILED IMPLEMENTATION PLAN FIRST** üö®

Any request involving database modifications must begin with a comprehensive implementation plan that includes:

1. **Current State Analysis**: What is the existing database structure?
2. **Proposed Changes**: What specific changes are needed?
3. **Dependencies**: What other components might be affected?
4. **Execution Order**: In what sequence should changes be applied?
5. **Rollback Strategy**: How to revert if something goes wrong?
6. **Testing Approach**: How will the changes be verified?

**DO NOT PROCEED WITH ANY DATABASE OPERATIONS WITHOUT FIRST PRESENTING AND GETTING APPROVAL FOR THE IMPLEMENTATION PLAN.**

## Work Structure Context

### Development Environment
- **Primary IDE**: Visual Studio Code
- **Database Management**: All SQL commands, table structures, queries, functions, and database operations are written and managed in VS Code
- **Database Environment**: No local database setup - all changes are applied directly to remote Supabase database
- **Local Files**: SQL files are stored in the `database/` directory with subfolders:
  - `tables.sql` - Table definitions
  - `functions/` - Database functions and procedures
  - `seeders/` - Data seeding scripts
- **Version Control**: All database changes are tracked in Git alongside application code
- **Testing**: All SQL testing and verification is performed against the remote Supabase database

### Database Synchronization Requirements
‚ö†Ô∏è **CRITICAL**: Whenever local SQL files are modified, corresponding changes MUST be applied to the remote Supabase database using the appropriate MCP tools to maintain consistency.

## Available Supabase MCP Tools

### üîç Database Exploration & Documentation
1. **`mcp_supabase_search_docs`** - Search the Supabase documentation using GraphQL queries
2. **`mcp_supabase_list_tables`** - Lists all tables in one or more schemas (defaults to public schema)
3. **`mcp_supabase_list_extensions`** - Lists all extensions in the database
4. **`mcp_supabase_list_migrations`** - Lists all migrations in the database

### ‚ö° Database Operations
5. **`mcp_supabase_apply_migration`** - Applies a migration to the database (for DDL operations like CREATE TABLE, ALTER TABLE)
6. **`mcp_supabase_execute_sql`** - Executes raw SQL in the Postgres database (for DML operations like INSERT, UPDATE, SELECT)

### üìä Monitoring & Debugging
7. **`mcp_supabase_get_logs`** - Gets logs for a Supabase project by service type (api, branch-action, postgres, edge-function, auth, storage, realtime)
8. **`mcp_supabase_get_advisors`** - Gets a list of advisory notices for the Supabase project (security/performance issues)

### üîë Project Configuration
9. **`mcp_supabase_get_project_url`** - Gets the API URL for a project
10. **`mcp_supabase_get_anon_key`** - Gets the anonymous API key for a project
11. **`mcp_supabase_generate_typescript_types`** - Generates TypeScript types for a project

### üåø Branch Management (Development)
15. **`mcp_supabase_create_branch`** - Creates a development branch on a Supabase project
16. **`mcp_supabase_list_branches`** - Lists all development branches of a Supabase project
17. **`mcp_supabase_delete_branch`** - Deletes a development branch
18. **`mcp_supabase_merge_branch`** - Merges migrations from a development branch to production
19. **`mcp_supabase_reset_branch`** - Resets migrations of a development branch (any untracked data/schema changes will be lost)
20. **`mcp_supabase_rebase_branch`** - Rebases a development branch on production to handle migration drift

## Database Synchronization Rules

### üîÑ Automatic Synchronization Requirements

#### 1. Table Structure Changes
**WHEN**: Modifying `database/tables.sql` or any table definition files
**ACTION**:
- Update local SQL files first
- Use `mcp_supabase_apply_migration` to apply DDL changes to remote database
- Verify changes with `mcp_supabase_list_tables`

#### 2. Database Function Changes
**WHEN**: Creating/modifying files in `database/functions/`
**ACTION**:
- Update local SQL function files first
- Use `mcp_supabase_execute_sql` with `CREATE OR REPLACE FUNCTION` statements
- Test functions with `mcp_supabase_execute_sql` SELECT calls

#### 3. Migration Files
**WHEN**: Adding new migration files or modifying existing ones
**ACTION**:
- Update local migration files first
- Use `mcp_supabase_apply_migration` to execute migrations on remote database
- Check migration status with `mcp_supabase_list_migrations`

#### 4. Seeder/Data Changes
**WHEN**: Modifying seeder files in `database/seeders/`
**ACTION**:
- Update local seeder files first
- Use `mcp_supabase_execute_sql` to execute INSERT/UPDATE statements
- Verify data integrity with SELECT queries

### üõ†Ô∏è Tool Usage Guidelines

#### DDL Operations (Schema Changes)
```sql
-- Always use mcp_supabase_apply_migration for:
-- CREATE TABLE, ALTER TABLE, DROP TABLE
-- CREATE INDEX, DROP INDEX
-- CREATE VIEW, DROP VIEW
-- etc.
```

#### DML Operations (Data Manipulation)
```sql
-- Use mcp_supabase_execute_sql for:
-- SELECT, INSERT, UPDATE, DELETE
-- CREATE FUNCTION, DROP FUNCTION
-- Data seeding operations
```

### üö® Error Handling

If remote database operations fail:
1. Check `mcp_supabase_get_logs` for detailed error messages
2. Verify local SQL syntax before remote execution
3. Use `mcp_supabase_list_tables` to check current state
4. Consult `mcp_supabase_get_advisors` for potential issues

### üìã Database Change Workflow

Follow these steps sequentially when making database changes:

#### **Step 1: Update SQL Files**
- Modify only the necessary `.sql` files in the `database/` directory
- Focus on the specific files that need changes (e.g., `tables.sql`, function files, migration files)
- Ensure changes are complete and syntactically correct

#### **Step 2: Review Database Folder**
- Examine all SQL files in the `database/` directory structure
- Verify file organization and dependencies
- Confirm all related files are properly updated

#### **Step 3: Pull Remote Structure**
- Use `mcp_supabase_list_tables` to get current remote database structure
- Compare with planned changes to identify what needs to be modified
- Check existing functions, constraints, and relationships

#### **Step 4: Remote Sync**
- Apply changes to remote Supabase database using appropriate MCP tools:
  - `mcp_supabase_apply_migration` for DDL changes (schema modifications)
  - `mcp_supabase_execute_sql` for DML changes and function deployments
- Execute changes in the correct order considering dependencies

#### **Step 5: Verification**
- Confirm changes took effect using `mcp_supabase_list_tables`
- Test functionality with `mcp_supabase_execute_sql` SELECT queries
- Run `mcp_supabase_get_advisors` for security/performance checks

### üéØ Best Practices

1. **Always sync**: Never modify local files without updating remote database
2. **Syntax review**: Review SQL syntax carefully before remote execution
3. **Backup first**: Check current state before major changes using `mcp_supabase_list_tables`
4. **Monitor logs**: Use logging tools to troubleshoot issues
5. **Security first**: Regularly check security advisories with `mcp_supabase_get_advisors`
6. **Document changes**: Keep track of schema evolution

### üìû Support Resources

- Use `mcp_supabase_search_docs` for Supabase documentation queries
- Check `mcp_supabase_get_advisors` for security and performance recommendations
- Review logs with `mcp_supabase_get_logs` for debugging

---